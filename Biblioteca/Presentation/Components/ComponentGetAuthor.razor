@using Biblioteca.Business.Interfaces
@using Biblioteca.Data.Models
@inject IJSRuntime JSRuntime
@inject IAuthorRepository AuthorRepository
@inject NavigationManager Navigation


@if (AuthorListP == null)
{
    <div class="container-fluid align-content-center justify-content-center" >
        <h3>Cargando autores...</h3>
    </div>
    
}
else if (AuthorListP.Count == 0)
{
    <div class="container-fluid align-items-center justify-content-center d-flex  " style="min-height:400px;" >
        <h3>No se encontraron autores.</h3>
    </div>
  
}
else
{
    <div class="row contenedorUsuarios">
        @foreach (var author in AuthorListP)
        {
            <div class="col-md-6 col-lg-4">
                <div class="full white_shd margin_bottom_30">
                <div class="info_people " style="height:auto">
                    <div>

                        <button style="top:4px;right:4px ;position:absolute" @onclick="()=>TakeAuthorToDelete(author)" data-bs-toggle="modal" data-bs-target="#MRemoveAuthorPG" title="Eliminar Autor" type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                        <div class="p_info_img contenedorImgAuthor" style="top:10px;">
                        @if(author.ImagePath==null){
                            <img class="img-responsive" src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTHXb_kmN-as-QCmEqdG9fOAg0VUQpHnrs5xP9gCQ8p7VkaPcuxs5BNG5C6fLwM-6nMXdk&usqp=CAU">
                        }else{
                            <img class="img-responsive" src="@author.ImagePath" alt="...">

                        }

                    </div>
                    <div class="user_info_cont"  title="Doble clic para editar" @ondblclick="() => OnRowDoubleClick(author)">
                        <h4 style="font-size: 20px;" class="card-title">@author.Name</h4>
                            <p> <strong>Edad:</strong>  @author.Age</p>
                            <p> <strong>Libros:</strong>  @author.Books.Count</p>

                            <p> <strong>Biografía:</strong>  @author.Biography</p>

                    </div>

                </div>
            </div> 
            </div>
           
        }
    </div>
}

@code {
    [Parameter] public List<Author> AuthorListP { get; set; }
    [Parameter] public RenderFragment ChildBookContent { get; set; }

    [Parameter]
    public EventCallback<Author> AuthorPG { get; set; }
    [Parameter]

    public EventCallback<Author> RemoveAuthorPG { get; set; }

    private async Task OnRowDoubleClick(Author author)
    {
        try
        {
            await AuthorPG.InvokeAsync(author);

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");

        }

    }

    private async Task TakeAuthorToDelete(Author author)
    {

        try
        {
            await RemoveAuthorPG.InvokeAsync(author);

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");

        }

    }
}
