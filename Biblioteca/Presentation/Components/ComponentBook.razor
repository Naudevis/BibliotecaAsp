
@page "/addbook"
@using Biblioteca.Business.Interfaces

@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject IBookRepository BookRepository
@inject IAuthorRepository AuthorRepository
@inject IImageRepository ImageRepository
@using Biblioteca.Data.Models
@inject NavigationManager Navigation

<EditForm Model="BookP" OnValidSubmit="OnMBookSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>


    <p style="color:red">@MessageP</p>
    @if (TitleP=="Actualizar"){
        <div>

            <label> Código Libro </label>
            <InputText @bind-Value="BookP.Id_Book" class="form-control" disabled/>

        </div>
    }else{
        <div>

            <label> Código Libro </label>
            <InputText @bind-Value="BookP.Id_Book" class="form-control" placeholder="El código debe ser de 13 digitos " />

        </div>
    }


    <div>

        <label> Título del Libro </label>
        <InputText @bind-Value="BookP.Title" class="form-control" placeholder="Introduce al menos 3 caracteres" />

    </div>
    <div>

        <label> Páginas </label>
        <InputText @bind-Value="BookP.Pages" class="form-control" placeholder="Introduce el número de páginas" />

    </div>
    <div>

        <label> Cantidad de libros </label>
        <InputNumber @bind-Value="BookP.Stock" class="form-control"  />

    </div>
    <div>

        <label> Precio </label>
        <InputNumber @bind-Value="BookP.Price" class="form-control"  />

    </div>
    <div>

        <label> Fecha de Edición </label>
        <InputDate @bind-Value="BookP.EditionDate" class="form-control" placeholder="Introduce la fecha de edición" />

    </div>
    <div>

        <label> Autor </label>
        <InputSelect  @bind-Value="BookP.Author_id" class="form-select">@*?*@
            <option value="">Seleccione un Autor</option>

            @foreach(var autor in UploadAuthorlListP){
                <option value="@autor.Author_id">@autor.Name</option>

            }
        </InputSelect>

    </div>
    <div>
        <label>Imagen:</label>
        <InputFile class="form-control" OnChange="HandleSubmit" />
    </div>


    <div class="modal-footer">
        @ChildContent

        <button type="submit" class="btn btn-success">@TitleP</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Book BookP  { get; set; }
    [Parameter] public List<Author> UploadAuthorlListP  {get;set;}
    [Parameter] public string TitleP  {get;set;}
    [Parameter] public string MessageP  {get;set;}

    [Parameter] public EventCallback OnMBookSubmit { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private IBrowserFile selectedImage;

    private async Task HandleSubmit(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            selectedImage = e.File;
            Console.WriteLine($"Archivo seleccionado: {selectedImage.Name}");
            if (selectedImage.Size > 512000)
            {
                MessageP = "El archivo no puede ser mayor de 500 KB.";
                return;  // No continuar si el archivo es demasiado grande
            }
        }
        else
        {
            Console.WriteLine("No se seleccionó ningún archivo.");
        }
        if (selectedImage != null)
        {
            try
            {
                var formFile = await ConvertToIFormFile(selectedImage);
                var imagePath = await ImageRepository.SaveImageAsync(formFile);
                BookP.ImagePathBook = imagePath;
            }
            catch (Exception ex)
            {
                // Log o mostrar el error
                Console.WriteLine($"Error al guardar la imagen: {ex.Message}");
            }

        }

        // await AuthorRepository.AddAuthorAsync(AuthorP);
    }

    private async Task<IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        var stream = new MemoryStream();
        await browserFile.OpenReadStream().CopyToAsync(stream);
        stream.Seek(0, SeekOrigin.Begin);

        return new FormFile(stream, 0, stream.Length, browserFile.Name, browserFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = browserFile.ContentType
            };
    }
}
