@page "/list-book"
@using Biblioteca.Business.Interfaces
@using Biblioteca.Data.Models
@rendermode InteractiveServer
@inject IBookRepository BookRepository
@inject IAuthorRepository AuthorRepository
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime


<div class="containerHead container-fluid shadow-sm p-3 mb-5 bg-body-tertiary rounded">
    <h3 style="padding-left:20px;">Libros</h3>
    <div title="Agregar Libro">

        <svg xmlns="http://www.w3.org/2000/svg" style="color:#4C60EB;" data-bs-toggle="modal" data-bs-target="#ModalAddBook" @onclick="cleanSpaces" width="30" height="30" fill="currentColor" class="bi bi-journal-plus iconAction" viewBox="0 0 16 16">
            <path fill-rule="evenodd" d="M8 5.5a.5.5 0 0 1 .5.5v1.5H10a.5.5 0 0 1 0 1H8.5V10a.5.5 0 0 1-1 0V8.5H6a.5.5 0 0 1 0-1h1.5V6a.5.5 0 0 1 .5-.5" />
            <path d="M3 0h10a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2v-1h1v1a1 1 0 0 0 1 1h10a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v1H1V2a2 2 0 0 1 2-2" />
            <path d="M1 5v-.5a.5.5 0 0 1 1 0V5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm0 3v-.5a.5.5 0 0 1 1 0V8h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1zm0 3v-.5a.5.5 0 0 1 1 0v.5h.5a.5.5 0 0 1 0 1h-2a.5.5 0 0 1 0-1z" />
        </svg>
    </div>
    <div class="containerSearch" style=" width: 25%;">
        <select class="form-select-sm " @onchange="OnSlSearchAddChange">
            <option class="btn-outline-secondary" value="Id" selected>Código</option>
            <option value="Title">Título</option>
            <option value="AuthorName">Autor</option>
            <option value="Price">Precio</option>
            <option value="Page">Páginas</option>
        </select>
        <input class="form-control" @oninput="SearchBook" type="text" name="name" style="width:70%" placeholder="Buscar por..." title="Todos(*)" />
    </div>
</div>

<div class="shadow bg-body-tertiary rounded" style="margin:5%;margin-top:2%">
    <div class="container-fluid form-control" style="padding-bottom:30px !important;">
        <div class="pagination align-items-center">
            <button class="btn page-link" @onclick="GoToPreviousPage" disabled="@(!HasPreviousPage)">Anterior</button>
            <span style="color:gray ;margin-left:5px;margin-right:5px;"> Página @currentPage de @totalPages </span>
            <button class="btn page-link " @onclick="GoToNextPage" disabled="@(!HasNextPage)">Siguiente</button>
            <div class="containerSearch align-items-center" style=" width: 17%;">
                <label style="margin-right:2%">Tarjetas por página</label>
                <input class="form-control" @bind="@pageSize" min="1" max="8" type="number" name="name" style="width:20%" />
            </div>
        </div>

        <br />


        <ComponentGetBooks Books="PaginatedBooks" newBook="newBookText">

      </ComponentGetBooks>
        

    </div>
</div>

<div class="modal fade" id="ModalAddBook" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@ModalTitle Libro</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ComponentBook OnSubmit="SaveR" Authors="newAuthors" NuevoLibro="newBook" Title="@ModalTitle" Message="@message">
                    <button class="btn btn-secondary" data-bs-dismiss="modal" type="button" @onclick="Cancelar">Cancelar</button>
                </ComponentBook>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Book> BooksList = new List<Book>();
    private int currentPage = 1;
    private int pageSize = 3;
    private string ModalTitle = "Agregar";
    private string MAddSlSearch = "Id";
    private string MAddtxtSearch = "";
    private string message = "";
    private Book newBook;
    public List<Author> newAuthors = new();

    private int totalPages => (int)Math.Ceiling(BooksList.Count / (double)pageSize);
    private bool HasPreviousPage => currentPage > 1;
    private bool HasNextPage => currentPage < totalPages;

    private List<Book> PaginatedBooks =>
        BooksList.Skip((currentPage - 1) * pageSize).Take(pageSize).ToList();



    private async Task newBookText(Book Book)
    {
        if (Book != null)
        {
            newBook = Book;
            ModalTitle = "Actualizar";
            await JSRuntime.InvokeVoidAsync("openModalBook");
        }
    }

    private async Task SaveR()
    {
        // Verificamos si ya existe un libro con el mismo ID
        var existBook = await BookRepository.GetBookByIdAsync(newBook.Id_Book);

        if (existBook.Id_Book == null) // Si no existe, lo agregamos
        {
            await BookRepository.AddBookAsync(newBook);
            Navigation.NavigateTo("/list-book", true); // Navegar al listado de libros
        }
        else if (existBook.Status_id == 2 && existBook.Id_Book != null)
        {
            existBook.Status_id = 1;
            existBook.Author_id = newBook.Author_id;
            existBook.EditionDate = newBook.EditionDate;
            existBook.Price = newBook.Price;
            existBook.Pages = newBook.Pages;
            existBook.Title = newBook.Title;

            await BookRepository.UpdateBookAsync(existBook);

            Navigation.NavigateTo("/list-book", true); // Navegar al listado de libros

        }
        else if (ModalTitle=="Actualizar"){
            await BookRepository.UpdateBookAsync(newBook);
            Navigation.NavigateTo("/list-book", true);
        }else
        {
            // Si el libro ya existe, mostramos un mensaje
            Console.WriteLine($"El libro con ID {newBook.Id_Book} ya existe.");
            message=$"El libro con ID {newBook.Id_Book} ya existe.";

      
        }
    }


    protected override async Task OnInitializedAsync()
    {
        newAuthors = (await AuthorRepository.GetAllAsync()).ToList();
        await LoadBooks();
        

    }
    protected override void OnInitialized()
    {

        newBook = new Book(
        );

    }

    private async Task LoadBooks()
    {
        try
        {
            BooksList = (await BookRepository.GetAllAsync()).ToList();
            UpdatePagination();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los clientes: {ex.Message}");

        }
    }

    private async Task SearchBook(ChangeEventArgs e)
    {
        MAddtxtSearch = e.Value?.ToString() ?? string.Empty;
        await UpdateBookList();
    }

    private async Task OnSlSearchAddChange(ChangeEventArgs e)
    {
        MAddSlSearch = e.Value?.ToString() ?? string.Empty;
        await UpdateBookList();
    }

    private async Task UpdateBookList()
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(MAddtxtSearch))
            {
                BooksList = (await BookRepository.GetBookByColumnAndId(MAddtxtSearch, MAddSlSearch)).ToList();
            }
            else
            {
                await LoadBooks();
            }
            UpdatePagination();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar la lista de clientes: {ex.Message}");
        }
    }

    private void UpdatePagination()
    {
        currentPage = 1; // Reset to the first page when the list changes
    }

    private void GoToPreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
        }
    }

    private void GoToNextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
        }
    }




    private void cleanSpaces()
    {
        newBook = new Book();
        ModalTitle = "Agregar";
    }




    private void OnRowDoubleClick(Book item)
    {
        try
        {
            newBook = item;

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e.Message}");

        }

    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/list-book");
    }
}
