@page "/addemployee"
@using Biblioteca.Business.Interfaces
@using Biblioteca.Data.Models
@inject IAuthorRepository EmployeeRepository

<h3>Agregar nuevo empleado</h3>

<EditForm Model="AuthorP" OnValidSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


         <div>

            <label> Cédula </label>
            <InputText @bind-Value="AuthorP.Author_id" placeholder="Introduce entre 9 y 12 dígitos" class="form-control" />

        </div>
    


    <div>

        <label> Nombre </label>
        <InputText @bind-Value="AuthorP.Name" placeholder="Introduce al menos 3 caracteres" class="form-control" />

    </div>
    <div>

        <label> Edad </label>
        <InputText @bind-Value="AuthorP.Age" class="form-control" placeholder="Edad entre 0 y 150 años" />

    </div>
    <div>

        <label> Biografía </label>
        <InputText @bind-Value="AuthorP.Biography" class="form-control" placeholder="Escribe al menos 15 caracteres" />

    </div>

    <div>
        <label>Imagen:</label>
        <InputFile OnChange="HandleFileChange" />
    </div>

    <div class="modal-footer">
    

        <button type="submit" class="btn btn-success">guardar</button>
    </div>
</EditForm>

@code {
    private Author AuthorP = new Author();
    private IBrowserFile selectedImage;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedImage = e.File;
    }

    private async Task HandleSubmit()
    {
        if (selectedImage != null)
        {
            try
            {
                var formFile = await ConvertToIFormFile(selectedImage);
                var imagePath = await EmployeeRepository.SaveImageAsync(formFile);
                AuthorP.ImagePath = imagePath;
            }
            catch (Exception ex)
            {
                // Log o mostrar el error
                Console.WriteLine($"Error al guardar la imagen: {ex.Message}");
            }

        }

        await EmployeeRepository.AddAuthorAsync(AuthorP);
    }

    private async Task<IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        var stream = new MemoryStream();
        await browserFile.OpenReadStream().CopyToAsync(stream);
        stream.Seek(0, SeekOrigin.Begin);

        return new FormFile(stream, 0, stream.Length, browserFile.Name, browserFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = browserFile.ContentType
            };
    }

}
