
@using Biblioteca.Business.Interfaces
@using Microsoft.EntityFrameworkCore.Metadata.Internal

@inject IAuthorRepository AuthorRepository
@inject IImageRepository ImageRepository
@using Biblioteca.Data.Models
@inject NavigationManager Navigation

<EditForm Model="AuthorP" OnValidSubmit="OnMAuthorSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />


    <p style="color:red">@MessageP</p>
    @if (TitleP == "Actualizar")
    {
        <div>

            <label> Cédula </label>
            <InputText @bind-Value="AuthorP.Author_id" class="form-control"  disabled />

        </div>
    }
    else
    {
        <div>

            <label> Cédula </label>
            <InputText @bind-Value="AuthorP.Author_id" placeholder="Introduce entre 9 y 12 dígitos" class="form-control" />

        </div>
    }



    <div>

        <label> Nombre </label>
        <InputText @bind-Value="AuthorP.Name" placeholder="Introduce al menos 3 caracteres" class="form-control" />

    </div>
    <div>

        <label> Edad </label>
        <InputText @bind-Value="AuthorP.Age" class="form-control" placeholder="Edad entre 0 y 150 años" />

    </div>
    <div>

        <label> Biografía </label>
        <InputText @bind-Value="AuthorP.Biography" class="form-control" placeholder="Escribe al menos 15 caracteres" />

    </div>

    <div>
        <label>Imagen:</label>
        <InputFile class="form-control"  OnChange="HandleSubmit" />
    </div>


    <div class="modal-footer">
        @ChildContent

        <button type="submit" class="btn btn-success" @onclick="UploadImage">@TitleP</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Author AuthorP { get; set; }

    [Parameter] public string TitleP { get; set; }
    [Parameter] public string MessageP { get; set; }

    [Parameter] public EventCallback OnMAuthorSubmit { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }



    private IBrowserFile selectedImage;



    private async Task HandleSubmit(InputFileChangeEventArgs e)
    {
        if (e.File != null)
        {
            selectedImage = e.File;
            Console.WriteLine($"Archivo seleccionado: {selectedImage.Name}");
            if (selectedImage.Size > 512000)
            {
                MessageP = "El archivo no puede ser mayor de 500 KB.";
                return;  // No continuar si el archivo es demasiado grande
            }else{
                MessageP = "";
                return;
            }
        }
        else
        {
            Console.WriteLine("No se seleccionó ningún archivo.");
        }


        // await AuthorRepository.AddAuthorAsync(AuthorP);
    }

    private async Task UploadImage(){
        if (selectedImage != null)
        {
            try
            {
                var formFile = await ConvertToIFormFile(selectedImage);
                var imagePath = await ImageRepository.SaveImageAsync(formFile);
                AuthorP.ImagePath = imagePath;
            }
            catch (Exception ex)
            {
                // Log o mostrar el error
                Console.WriteLine($"Error al guardar la imagen: {ex.Message}");
            }

        }

    }

    private async Task<IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        var stream = new MemoryStream();
        await browserFile.OpenReadStream().CopyToAsync(stream);
        stream.Seek(0, SeekOrigin.Begin);

        return new FormFile(stream, 0, stream.Length, browserFile.Name, browserFile.Name)
            {
                Headers = new HeaderDictionary(),
                ContentType = browserFile.ContentType
            };
    }


}
